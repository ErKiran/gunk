// Code generated by protoc-gen-go. DO NOT EDIT.
// source: testdata/echo.gunk

/*
Package echo is a generated protocol buffer package.

package util contains a simple Echo service.

It is generated from these files:
	testdata/echo.gunk

It has these top-level messages:
	Empty
	Message
	CheckStatusResponse
*/
package echo

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Status is a server health status.
type Status int32

const (
	Status_Unknown Status = 0
	Status_Error   Status = 1
	Status_OK      Status = 2
)

var Status_name = map[int32]string{
	0: "Unknown",
	1: "Error",
	2: "OK",
}
var Status_value = map[string]int32{
	"Unknown": 0,
	"Error":   1,
	"OK":      2,
}

func (x Status) String() string {
	return proto.EnumName(Status_name, int32(x))
}
func (Status) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type Empty struct {
}

func (m *Empty) Reset()                    { *m = Empty{} }
func (m *Empty) String() string            { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()               {}
func (*Empty) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

// Message is a Echo message.
type Message struct {
	// Msg holds a message.
	Msg string `protobuf:"bytes,0,,name=Msg" json:"Msg,omitempty"`
}

func (m *Message) Reset()                    { *m = Message{} }
func (m *Message) String() string            { return proto.CompactTextString(m) }
func (*Message) ProtoMessage()               {}
func (*Message) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Message) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

// CheckStatusResponse is the response for a check status.
type CheckStatusResponse struct {
	Status Status `protobuf:"varint,1,,name=Status,enum=Status" json:"Status,omitempty"`
}

func (m *CheckStatusResponse) Reset()                    { *m = CheckStatusResponse{} }
func (m *CheckStatusResponse) String() string            { return proto.CompactTextString(m) }
func (*CheckStatusResponse) ProtoMessage()               {}
func (*CheckStatusResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *CheckStatusResponse) GetStatus() Status {
	if m != nil {
		return m.Status
	}
	return Status_Unknown
}

func init() {
	proto.RegisterType((*Empty)(nil), "Empty")
	proto.RegisterType((*Message)(nil), "Message")
	proto.RegisterType((*CheckStatusResponse)(nil), "CheckStatusResponse")
	proto.RegisterEnum("Status", Status_name, Status_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Util service

type UtilClient interface {
	Echo(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Message, error)
	CheckStatus(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*CheckStatusResponse, error)
}

type utilClient struct {
	cc *grpc.ClientConn
}

func NewUtilClient(cc *grpc.ClientConn) UtilClient {
	return &utilClient{cc}
}

func (c *utilClient) Echo(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Message, error) {
	out := new(Message)
	err := grpc.Invoke(ctx, "/Util/Echo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *utilClient) CheckStatus(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*CheckStatusResponse, error) {
	out := new(CheckStatusResponse)
	err := grpc.Invoke(ctx, "/Util/CheckStatus", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Util service

type UtilServer interface {
	Echo(context.Context, *Message) (*Message, error)
	CheckStatus(context.Context, *Empty) (*CheckStatusResponse, error)
}

func RegisterUtilServer(s *grpc.Server, srv UtilServer) {
	s.RegisterService(&_Util_serviceDesc, srv)
}

func _Util_Echo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Message)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UtilServer).Echo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Util/Echo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UtilServer).Echo(ctx, req.(*Message))
	}
	return interceptor(ctx, in, info, handler)
}

func _Util_CheckStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UtilServer).CheckStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Util/CheckStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UtilServer).CheckStatus(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _Util_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Util",
	HandlerType: (*UtilServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Echo",
			Handler:    _Util_Echo_Handler,
		},
		{
			MethodName: "CheckStatus",
			Handler:    _Util_CheckStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "testdata/echo.gunk",
}

func init() { proto.RegisterFile("testdata/echo.gunk", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 197 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x8e, 0x41, 0x4b, 0x84, 0x40,
	0x18, 0x86, 0xd5, 0x74, 0x26, 0x3f, 0x21, 0xe4, 0xcb, 0x40, 0x3c, 0x7a, 0x92, 0x8a, 0x09, 0xec,
	0x27, 0x84, 0xa7, 0x10, 0xa1, 0xf0, 0x07, 0x4c, 0x36, 0x68, 0x58, 0x33, 0x32, 0xf3, 0x49, 0xec,
	0xbf, 0x5f, 0x58, 0x77, 0x97, 0x3d, 0xec, 0xed, 0x7d, 0x9f, 0xcb, 0xf3, 0x00, 0x92, 0x72, 0xf4,
	0x2d, 0x49, 0xbe, 0xa8, 0x61, 0x32, 0x62, 0x5c, 0xf5, 0x5c, 0x72, 0x88, 0x9a, 0xbf, 0x85, 0x76,
	0x65, 0x06, 0xbc, 0x55, 0xce, 0xc9, 0x51, 0x61, 0x0c, 0x37, 0xad, 0x1b, 0x73, 0xaf, 0x8a, 0xcb,
	0x67, 0xb8, 0x7f, 0x9b, 0xd4, 0x30, 0x7f, 0x92, 0xa4, 0xd5, 0x7d, 0x28, 0xb7, 0x18, 0xed, 0x14,
	0x3e, 0x00, 0xdb, 0x48, 0xee, 0x57, 0x77, 0x35, 0x17, 0xdb, 0x79, 0xac, 0x4e, 0x18, 0x13, 0xe0,
	0xbd, 0x9e, 0xb5, 0xf9, 0xd7, 0xa9, 0x87, 0x31, 0x44, 0x8d, 0xb5, 0xc6, 0xa6, 0x3e, 0x32, 0x08,
	0xba, 0xf7, 0x34, 0xa8, 0x3b, 0x08, 0x7b, 0xfa, 0xf9, 0xc5, 0x02, 0xc2, 0x66, 0x98, 0x0c, 0xde,
	0x8a, 0xa3, 0xbc, 0x38, 0x2f, 0x7c, 0x82, 0xe4, 0xc2, 0x8d, 0x4c, 0x1c, 0x42, 0x8b, 0x4c, 0x5c,
	0x29, 0xfa, 0x62, 0x8b, 0x35, 0x64, 0x5e, 0xf7, 0x01, 0x00, 0x00, 0xff, 0xff, 0x27, 0x15, 0x77,
	0x48, 0xe4, 0x00, 0x00, 0x00,
}
