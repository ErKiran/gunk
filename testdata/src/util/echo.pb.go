// Code generated by protoc-gen-go. DO NOT EDIT.
// source: testdata/src/util/echo.gunk

/*
Package util is a generated protocol buffer package.

package util contains a simple Echo service.

It is generated from these files:
	testdata/src/util/echo.gunk
	testdata/src/util/types.gunk

It has these top-level messages:
	CheckStatusResponse
*/
package util

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/empty"
import util_imp "testdata/src/util/imp"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type CheckStatusResponse struct {
	Status Status `protobuf:"varint,1,,name=Status,enum=util.Status" json:"Status,omitempty"`
}

func (m *CheckStatusResponse) Reset()                    { *m = CheckStatusResponse{} }
func (m *CheckStatusResponse) String() string            { return proto.CompactTextString(m) }
func (*CheckStatusResponse) ProtoMessage()               {}
func (*CheckStatusResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *CheckStatusResponse) GetStatus() Status {
	if m != nil {
		return m.Status
	}
	return Status_Unknown
}

func init() {
	proto.RegisterType((*CheckStatusResponse)(nil), "util.CheckStatusResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Util service

type UtilClient interface {
	// Echo echoes a message.
	Echo(ctx context.Context, in *util_imp.Message, opts ...grpc.CallOption) (*util_imp.Message, error)
	// CheckStatus sends the server health status.
	CheckStatus(ctx context.Context, in *google_protobuf.Empty, opts ...grpc.CallOption) (*CheckStatusResponse, error)
}

type utilClient struct {
	cc *grpc.ClientConn
}

func NewUtilClient(cc *grpc.ClientConn) UtilClient {
	return &utilClient{cc}
}

func (c *utilClient) Echo(ctx context.Context, in *util_imp.Message, opts ...grpc.CallOption) (*util_imp.Message, error) {
	out := new(util_imp.Message)
	err := grpc.Invoke(ctx, "/util.Util/Echo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *utilClient) CheckStatus(ctx context.Context, in *google_protobuf.Empty, opts ...grpc.CallOption) (*CheckStatusResponse, error) {
	out := new(CheckStatusResponse)
	err := grpc.Invoke(ctx, "/util.Util/CheckStatus", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Util service

type UtilServer interface {
	// Echo echoes a message.
	Echo(context.Context, *util_imp.Message) (*util_imp.Message, error)
	// CheckStatus sends the server health status.
	CheckStatus(context.Context, *google_protobuf.Empty) (*CheckStatusResponse, error)
}

func RegisterUtilServer(s *grpc.Server, srv UtilServer) {
	s.RegisterService(&_Util_serviceDesc, srv)
}

func _Util_Echo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(util_imp.Message)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UtilServer).Echo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/util.Util/Echo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UtilServer).Echo(ctx, req.(*util_imp.Message))
	}
	return interceptor(ctx, in, info, handler)
}

func _Util_CheckStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(google_protobuf.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UtilServer).CheckStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/util.Util/CheckStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UtilServer).CheckStatus(ctx, req.(*google_protobuf.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _Util_serviceDesc = grpc.ServiceDesc{
	ServiceName: "util.Util",
	HandlerType: (*UtilServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Echo",
			Handler:    _Util_Echo_Handler,
		},
		{
			MethodName: "CheckStatus",
			Handler:    _Util_CheckStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "testdata/src/util/echo.gunk",
}

func init() { proto.RegisterFile("testdata/src/util/echo.gunk", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 212 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x50, 0x3d, 0x4b, 0x05, 0x31,
	0x10, 0x44, 0x38, 0xae, 0x88, 0x22, 0x18, 0x41, 0x34, 0x4f, 0x2c, 0xac, 0x2c, 0x64, 0x83, 0xcf,
	0x3f, 0x20, 0xca, 0x2b, 0x6d, 0x14, 0x1b, 0xbb, 0x5c, 0x5c, 0x73, 0xc7, 0x7d, 0x24, 0xdc, 0x6e,
	0x84, 0xfb, 0xf7, 0x92, 0x84, 0x03, 0xe1, 0x2c, 0x52, 0xcc, 0x0c, 0x33, 0x93, 0x59, 0xb1, 0x63,
	0x24, 0xfe, 0x32, 0x6c, 0x34, 0xcd, 0x56, 0x47, 0xee, 0x06, 0x8d, 0xb6, 0xf5, 0xe0, 0xe2, 0xd4,
	0xcb, 0x2a, 0x61, 0xb5, 0x73, 0xde, 0xbb, 0x01, 0x75, 0x98, 0x3d, 0xfb, 0x26, 0x7e, 0x6b, 0x1c,
	0x03, 0x2f, 0x90, 0xa1, 0xba, 0xde, 0xfa, 0x79, 0x09, 0x48, 0x39, 0x40, 0xdd, 0x6c, 0xd5, 0x6e,
	0x0c, 0xe9, 0x65, 0xfd, 0xf6, 0x41, 0x9c, 0xbf, 0xb4, 0x68, 0xfb, 0x77, 0x36, 0x1c, 0xe9, 0x0d,
	0x29, 0xf8, 0x89, 0x50, 0x2a, 0x51, 0x17, 0xe6, 0xf2, 0xe8, 0xee, 0x74, 0x7f, 0x02, 0xc9, 0x08,
	0x85, 0xd9, 0xff, 0x88, 0xea, 0x83, 0xbb, 0x41, 0xde, 0x8b, 0xea, 0x60, 0x5b, 0x2f, 0xcf, 0x60,
	0x8d, 0x85, 0x57, 0x24, 0x32, 0x0e, 0xd5, 0x96, 0x92, 0x4f, 0xe2, 0xf8, 0x4f, 0x91, 0xbc, 0x80,
	0xb2, 0x09, 0xd6, 0x4d, 0x70, 0x48, 0x9b, 0xd4, 0x55, 0xa9, 0xfa, 0xe7, 0x4f, 0xcf, 0xf5, 0x67,
	0xbe, 0x46, 0x53, 0x67, 0xcb, 0xe3, 0x6f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x26, 0xfb, 0x67, 0x92,
	0x39, 0x01, 0x00, 0x00,
}
